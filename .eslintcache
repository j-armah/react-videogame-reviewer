[{"/Users/jeremyarmah/Flatiron/code/Mod4/phase4-project/react-video-game-reviewer/src/reportWebVitals.js":"1","/Users/jeremyarmah/Flatiron/code/Mod4/phase4-project/react-video-game-reviewer/src/components/GameList.js":"2","/Users/jeremyarmah/Flatiron/code/Mod4/phase4-project/react-video-game-reviewer/src/components/GameCard.js":"3","/Users/jeremyarmah/Flatiron/code/Mod4/phase4-project/react-video-game-reviewer/src/index.js":"4","/Users/jeremyarmah/Flatiron/code/Mod4/phase4-project/react-video-game-reviewer/src/components/App.js":"5","/Users/jeremyarmah/Flatiron/code/Mod4/phase4-project/react-video-game-reviewer/src/components/GamePage.js":"6","/Users/jeremyarmah/Flatiron/code/Mod4/phase4-project/react-video-game-reviewer/src/components/Login.js":"7","/Users/jeremyarmah/Flatiron/code/Mod4/phase4-project/react-video-game-reviewer/src/components/UserPage.js":"8","/Users/jeremyarmah/Flatiron/code/Mod4/phase4-project/react-video-game-reviewer/src/components/Nav.js":"9"},{"size":362,"mtime":1611258976960,"results":"10","hashOfConfig":"11"},{"size":277,"mtime":1611269159274,"results":"12","hashOfConfig":"11"},{"size":713,"mtime":1611531037713,"results":"13","hashOfConfig":"11"},{"size":509,"mtime":1611347729628,"results":"14","hashOfConfig":"11"},{"size":3078,"mtime":1611611296328,"results":"15","hashOfConfig":"11"},{"size":6694,"mtime":1611610244913,"results":"16","hashOfConfig":"11"},{"size":746,"mtime":1611530131567,"results":"17","hashOfConfig":"11"},{"size":3452,"mtime":1611611344682,"results":"18","hashOfConfig":"11"},{"size":538,"mtime":1611601404262,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1sxe29w",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jeremyarmah/Flatiron/code/Mod4/phase4-project/react-video-game-reviewer/src/reportWebVitals.js",[],"/Users/jeremyarmah/Flatiron/code/Mod4/phase4-project/react-video-game-reviewer/src/components/GameList.js",[],"/Users/jeremyarmah/Flatiron/code/Mod4/phase4-project/react-video-game-reviewer/src/components/GameCard.js",["43","44","45","46"],"import React from 'react';\nimport { Link, useHistory } from \"react-router-dom\";\n\nfunction GameCard({game}) {\n    const {id, title, genre, maturity_rating, description, image} = game\n\n    //let history = useHistory()\n\n    return (\n        <div className=\"card\">\n            {/* <a href={`/games/${id}`}>\n                <img className=\"poster\" src={image} alt={title}/>\n            </a> */}\n            {/* <h4 className=\"card-header\">{title}</h4>\n            <p>{genre}, {maturity_rating}</p>\n            <p>{description}</p> */}\n        \n            <Link to={`/games/${id}`}>\n                <img className=\"poster\" src={image} alt={title}/>\n            </Link>\n        </div>\n    )\n}\n\nexport default GameCard;\n","/Users/jeremyarmah/Flatiron/code/Mod4/phase4-project/react-video-game-reviewer/src/index.js",[],"/Users/jeremyarmah/Flatiron/code/Mod4/phase4-project/react-video-game-reviewer/src/components/App.js",["47"],"\nimport React, {useState, useEffect} from 'react';\nimport { Redirect, Route, Switch, useHistory } from \"react-router-dom\";\nimport GameList from './GameList';\nimport GamePage from './GamePage'\nimport Login from './Login'\nimport UserPage from './UserPage'\nimport Nav from './Nav'\n\nfunction App() {\n  const [games, setGames] = useState([])\n  //const [currentUser, setCurrentUser] = useState({id: 8, username: \"test user 1\"})\n  const [currentUser, setCurrentUser] = useState(null)\n  const [userGames, setUserGames] = useState([])\n  const history = useHistory()\n\n\n  const handleLogin = (user) => {\n    console.log(user.username)\n    setCurrentUser(user)\n  }\n\n  const handleLogout = () => {\n    setCurrentUser(null)\n    history.push(\"/\")\n  }\n\n  const handleAddGame = (gameObj) => {\n    console.log(gameObj)\n    fetch(`${process.env.REACT_APP_API_BASE_URL}/user_games`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        game_id : gameObj.id,\n        user_id: currentUser.id,\n        favorite: false\n      })\n    })\n    .then(r => r.json())\n    .then(data => {\n      if (data.id !== null) {\n        setUserGames([...userGames, data])\n      } else {\n          alert(\"Already added game!\")\n      } \n      \n    })\n  }\n\n  const handleFavorite = (updatedUserGame) => {\n    const updatedUserGames = userGames.map(userGame => {\n      if (userGame.id == updatedUserGame.id) {\n        return {...userGame, favorite: updatedUserGame.favorite}\n      } else {\n        return userGame\n      }\n    })\n    setUserGames(updatedUserGames)\n  }\n\n  useEffect(() => {\n    fetch(`${process.env.REACT_APP_API_BASE_URL}/games`)\n      .then(response => response.json())\n      .then(data => {\n        setGames(data)\n      })\n  }, []);\n\n  useEffect(() => {\n    fetch(`${process.env.REACT_APP_API_BASE_URL}/user_games`)\n      .then(response => response.json())\n      .then(data => {\n        setUserGames(data)\n      })\n  }, []);\n\n  console.log(currentUser)\n  if (!currentUser) {\n    return (\n        <Route exact path='/'>\n            <Login setCurrentUser={handleLogin} />\n        </Route>\n    )\n  } else {\n    return (\n    <div className=\"root\">\n        <Route>\n            <header>LOGO HEADER</header>\n            {/* Navbar prob need its own component? for search and filter, but only when on /games */}\n            <Nav currentUser={currentUser} handleLogout={handleLogout}/>\n        </Route>\n        <Switch>\n          <Route exact path=\"/games\">\n            <main className=\"game-library\">\n              <GameList games={games}/>\n            </main>\n          </Route>\n          \n          <Route exact path=\"/games/:id\">\n            <GamePage currentUser={currentUser} addGame={handleAddGame}/>\n          </Route>\n          <Route exact path=\"/users/:id\">\n            <UserPage setUserGames={setUserGames} userGames={userGames} handleFavorite={handleFavorite}/>\n          </Route>\n          <Route path=\"*\">\n            <Redirect to=\"/games\" />\n          </Route>\n      </Switch>\n    </div>\n    );\n  }\n}\n\nexport default App;\n\n","/Users/jeremyarmah/Flatiron/code/Mod4/phase4-project/react-video-game-reviewer/src/components/GamePage.js",["48","49"],"import React, {useState, useEffect} from 'react'\nimport { useParams } from 'react-router-dom';\n\nfunction GamePage({ addGame, currentUser }) {\n    const [game, setGame] = useState(null)\n    const [isLoaded, setIsLoaded] = useState(false)\n    const [content, setContent] = useState(\"\")\n    const [rating, setRating] = useState(0)\n    const [reviews, setReviews] = useState([])\n\n    const params = useParams()\n    //console.log(params.id)\n\n    useEffect(() => {\n        fetch(`${process.env.REACT_APP_API_BASE_URL}/reviews/`)\n          .then((r) => r.json())\n          .then((reviews) => {\n            \n            const gameReviews = reviews.filter(review => review.game_id === parseInt(params.id))\n            console.log(gameReviews)\n            setReviews(gameReviews);\n          });\n    }, [params.id])\n\n    useEffect(() => {\n        fetch(`${process.env.REACT_APP_API_BASE_URL}/games/${params.id}`)\n          .then((r) => r.json())\n          .then((game) => {\n              console.log(game)\n            setGame(game);\n            setIsLoaded(true);\n          });\n    }, [params.id]);\n\n    \n\n    function handleAddReview(newReview) {\n        const newReviews = [...reviews, newReview]\n        setReviews(newReviews)\n    }\n\n    function handleSubmit(event) {\n        event.preventDefault()\n        //console.log(content, rating)\n        fetch(\"http://localhost:4000/reviews\", {\n            method: 'POST',\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\"\n            },\n            body: JSON.stringify({\n                game_id: game.id,\n                content: content,\n                rating: parseFloat(rating),\n                user_id: currentUser.id\n            })\n        })\n        .then(response => response.json())\n        .then(newReview => {\n            if (newReview.id !== null) {\n                handleAddReview(newReview)\n            } else {\n                alert(\"Already reviewed game!\")\n            } \n        })\n    }\n\n    function handleDeleteReview(key) {\n        //console.log(key)\n        fetch(`http://localhost:4000/reviews/${key}`, {\n            method: 'DELETE'\n        })\n        .then(response => response.json())\n        .then(data => {\n            const newReviews = reviews.filter(review => review.id != key)\n            setReviews(newReviews)\n        })\n    }\n\n    function addEditForm(reviewObj) {\n        return (\n            <div>\n                <form onSubmit={handleEditReview}>\n                        <label>\n                            Edit Review:<br/>\n                            <textarea name=\"content\" value={reviewObj.content} onChange ={event => setContent(event.target.value)}/>\n                            <br/>\n                            Rating: <select name=\"rating\" id=\"rating\" form=\"review\" value={reviewObj.rating} onChange={event => setRating(event.target.value)}>\n                                <option value=\"1\">1</option>\n                                <option value=\"2\">2</option>\n                                <option value=\"3\">3</option>\n                                <option value=\"4\">4</option>\n                                <option value=\"5\">5</option>\n                            </select>\n                        </label>\n                        <button type=\"submit\">Submit Review</button>\n                    </form>\n            </div>\n        );\n    }\n\n    function editForm (review) {\n        console.log(review)\n    }\n\n    function handleEditReview(key) {\n        fetch(`http://localhost:4000/reviews/${key}`, {\n            method: 'PATCH',\n            header: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\"\n            },\n            body: JSON.stringify({\n                content: content,\n                rating: rating\n            })\n        })\n        .then(response => response.json())\n\n    }\n    //console.log(game)\n    if (!isLoaded) return <h2>Loading...</h2>;\n    \n    return (\n        <div>\n            <h1>{game.title}</h1>\n            <div className=\"game-page-info\">\n                <div className=\"video\">\n                    Video/Poster\n                    \n                </div>\n                <div className=\"game-info\">\n                    Description/Info\n                    <h3>{game.title}</h3>\n                    <p>{game.genre}</p>\n                    <p>{game.maturity_rating}</p>\n                    <p>{game.description}</p>\n                    <button onClick={() => addGame(game)}> Add to Game List</button>\n                </div>\n\n                <div className=\"game-review\">\n                    Reviews/Review Form\n                    <ul>\n                        {reviews.map(review => \n                            <li key={review.id}>\n                                {review.user.username} | {review.rating}\n                                <p>{review.content}</p>\n                                <button className=\"edit-button\" onClick={() => addEditForm(review)}>📝</button>\n                                <button className=\"delete-button\" onClick={() => handleDeleteReview(review.id)}>🗑</button>\n                            </li>\n                        )}\n                    </ul>\n                    {/* Flip div ? */}\n                    <form onSubmit={handleSubmit}>\n                        <label>\n                            Write a review:<br/>\n                            <textarea name=\"content\" value={content} onChange ={event => setContent(event.target.value)}/>\n                            <br/>\n                            Rating: <select name=\"rating\" id=\"rating\" form=\"review\" value={rating} onChange={event => setRating(event.target.value)}>\n                                <option value=\"1\">1</option>\n                                <option value=\"2\">2</option>\n                                <option value=\"3\">3</option>\n                                <option value=\"4\">4</option>\n                                <option value=\"5\">5</option>\n                            </select>\n                        </label>\n                        <button type=\"submit\">Submit Review</button>\n                    </form>\n                </div>\n            </div>\n            {/* \n            Video and game description here, or just game description for now on One side\n            Reviews on right, if Logged in there should be some way to write a review here if you've added this game to your played game list\n            Would have to fetch usergames and determine whether user has played game? If yes they can write a review, which would Post a new review obj\n            */}\n        </div>\n    )\n}\n\nexport default GamePage\n","/Users/jeremyarmah/Flatiron/code/Mod4/phase4-project/react-video-game-reviewer/src/components/Login.js",["50"],"import React, {useState} from 'react'\n\nfunction Login({ setCurrentUser }) {\n    function login() {\n        fetch(`${process.env.REACT_APP_API_BASE_URL}/`, {\n          method: \"POST\",\n          headers: {\n              \"Content-Type\": \"application/json\"\n          }\n        })\n          .then((r) => r.json())\n          .then(data => {\n              setCurrentUser(data)\n\n          });\n      }\n\n\n    return (\n        <div className=\"login\">\n            <div className=\"login-form\">\n                <h3>LOGIN!!!!!</h3>\n                <button onClick={login}> Login </button>\n            </div>\n            {/* Login Form here, button hit to switch to sign up form... Probably use fake auth for now */}\n        </div>\n    )\n}\n\nexport default Login\n","/Users/jeremyarmah/Flatiron/code/Mod4/phase4-project/react-video-game-reviewer/src/components/UserPage.js",["51","52"],"import React, {useState, useEffect} from 'react'\nimport { useParams } from 'react-router-dom'\n\nfunction UserPage({userGames, handleFavorite, setUserGames}) {\n    const [user, setUser] = useState(null)\n    const [isLoaded, setIsLoaded] = useState(false)\n    //const [isFavorited, setIsFavorited] = useState(false)\n    //const [userGames, setUserGames] = useState([])\n\n    const params = useParams()\n    console.log(userGames)\n\n    useEffect(() => {\n        fetch(`${process.env.REACT_APP_API_BASE_URL}/users/${params.id}`)\n          .then((r) => r.json())\n          .then((user) => {\n              //console.log(user)\n            setUser(user);\n            setIsLoaded(true);\n          });\n    }, [params.id]);\n\n    const toggleFavorite = (userGameObj) => {\n        console.log(!userGameObj.favorite)\n        //setIsFavorited(isFavorited => !isFavorited)\n        fetch(`${process.env.REACT_APP_API_BASE_URL}/user_games/${userGameObj.id}`, {\n            method: \"PATCH\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                favorite: !userGameObj.favorite\n            })\n        })\n        .then(r => r.json())\n        .then(data => {\n            console.log(data)\n            handleFavorite(data)\n        })\n    }\n\n    function handleDeleteGame(key) {\n        //console.log(key)\n        fetch(`http://localhost:4000/user_games/${key}`, {\n            method: 'DELETE'\n        })\n        .then(response => response.json())\n        .then(data => {\n            const newGames = userGames.filter(user_game => user_game.id != key)\n            setUserGames(newGames)\n        })\n    }\n\n    //console.log(filteredUserGames)\n    if (!isLoaded) return <h2>Loading...</h2>;\n    return (\n        <div>\n            <h1> User 1 </h1>\n            {/* Shows username and user info, shows a list of games they've played, a list of their favorite games, and a list of their reviews */}\n            <div className=\"user-page-info\">\n                <div className=\"game-list\">\n                    Gamelist \n                    {/* Can sort by favorites */}\n                    <ul>\n                        {userGames.filter(user_game =>\n                            user_game.user_id == user.id\n                        )\n                        .map(user_game => \n                        <li key={user_game.id}>\n                            {user_game.game.title}\n                            {/* {game.user_games.favorite? \"favorited\": \"not favorited\"} */}\n                            {user_game.favorite ? (\n                                <button className=\"emoji-button favorite active\" onClick={() => toggleFavorite(user_game)}>★</button>\n                                ) : (\n                                <button className=\"emoji-button favorite\" onClick={() => toggleFavorite(user_game)}>☆</button>\n                                )}\n                            <button className=\"delete-button\" onClick={() => handleDeleteGame(user_game.id)}>🗑</button>  \n                        </li>)}\n                    </ul>\n                </div>\n                <div className=\"reviewed\">\n                    Reviewed games\n                    <ul>\n                        {user.reviews.map(review => <li key={review.id}>{review.game.title}: {review.content}</li>)}\n                    </ul>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default UserPage\n","/Users/jeremyarmah/Flatiron/code/Mod4/phase4-project/react-video-game-reviewer/src/components/Nav.js",[],{"ruleId":"53","severity":1,"message":"54","line":2,"column":16,"nodeType":"55","messageId":"56","endLine":2,"endColumn":26},{"ruleId":"53","severity":1,"message":"57","line":5,"column":23,"nodeType":"55","messageId":"56","endLine":5,"endColumn":28},{"ruleId":"53","severity":1,"message":"58","line":5,"column":30,"nodeType":"55","messageId":"56","endLine":5,"endColumn":45},{"ruleId":"53","severity":1,"message":"59","line":5,"column":47,"nodeType":"55","messageId":"56","endLine":5,"endColumn":58},{"ruleId":"60","severity":1,"message":"61","line":54,"column":23,"nodeType":"62","messageId":"63","endLine":54,"endColumn":25},{"ruleId":"60","severity":1,"message":"64","line":75,"column":67,"nodeType":"62","messageId":"63","endLine":75,"endColumn":69},{"ruleId":"53","severity":1,"message":"65","line":102,"column":14,"nodeType":"55","messageId":"56","endLine":102,"endColumn":22},{"ruleId":"53","severity":1,"message":"66","line":1,"column":16,"nodeType":"55","messageId":"56","endLine":1,"endColumn":24},{"ruleId":"60","severity":1,"message":"64","line":49,"column":73,"nodeType":"62","messageId":"63","endLine":49,"endColumn":75},{"ruleId":"60","severity":1,"message":"61","line":66,"column":47,"nodeType":"62","messageId":"63","endLine":66,"endColumn":49},"no-unused-vars","'useHistory' is defined but never used.","Identifier","unusedVar","'genre' is assigned a value but never used.","'maturity_rating' is assigned a value but never used.","'description' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","'editForm' is defined but never used.","'useState' is defined but never used."]